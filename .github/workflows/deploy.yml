name: Enhanced Deploy with Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # CSS and Code Quality Checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate CSS
        run: |
          # Check for CSS syntax errors
          npx stylelint "src/**/*.css" --config-basedir .
          
          # Verify critical CSS classes exist
          echo "Checking for critical CSS classes..."
          grep -q "\.presentation-container" src/App.css || (echo "Missing .presentation-container class" && exit 1)
          grep -q "\.menu-overlay" src/App.css || (echo "Missing .menu-overlay class" && exit 1)
          grep -q "\.slide-header" src/App.css || (echo "Missing .slide-header class" && exit 1)
          grep -q "\.key-point-card" src/App.css || (echo "Missing .key-point-card class" && exit 1)
          echo "‚úÖ All critical CSS classes found"
      
      - name: Build and validate
        run: |
          npm run build
          
          # Check that build output contains expected files
          test -f dist/index.html || (echo "Missing dist/index.html" && exit 1)
          test -d dist/assets || (echo "Missing dist/assets directory" && exit 1)
          
          # Verify HTML references built assets, not source files
          if grep -q "/src/main.jsx" dist/index.html; then
            echo "‚ùå ERROR: Built HTML still references source files!"
            echo "Found in dist/index.html:"
            grep "/src/main.jsx" dist/index.html
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"

  # Visual and Functional Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
      
      - name: Run Playwright tests
        run: npx playwright test
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Production Health Check
  production-health:
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for production
        run: npm run build
      
      - name: Production readiness check
        run: |
          echo "üîç Running production readiness checks..."
          
          # Check bundle size
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "üì¶ Bundle size: $BUNDLE_SIZE"
          
          # Check for source maps in production
          if find dist/ -name "*.map" | grep -q .; then
            echo "‚ö†Ô∏è  Warning: Source maps found in production build"
          fi
          
          # Verify critical files exist
          test -f dist/index.html || (echo "‚ùå Missing index.html" && exit 1)
          
          # Check HTML structure
          if ! grep -q "<title>Above.*Runtime Identity" dist/index.html; then
            echo "‚ùå Missing or incorrect page title"
            exit 1
          fi
          
          echo "‚úÖ Production readiness check passed"

  # Deploy to GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests, production-health]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Pre-deployment validation
        run: |
          echo "üîç Final pre-deployment validation..."
          
          # Verify build integrity
          test -f dist/index.html || (echo "‚ùå Build failed: missing index.html" && exit 1)
          
          # Check that HTML references built assets
          if grep -q "/src/" dist/index.html; then
            echo "‚ùå ERROR: HTML still references source files!"
            grep "/src/" dist/index.html
            exit 1
          fi
          
          # Verify CSS is included
          if ! grep -q "\.css" dist/index.html; then
            echo "‚ùå ERROR: No CSS files referenced in HTML!"
            exit 1
          fi
          
          # Verify JS is included
          if ! grep -q "\.js" dist/index.html; then
            echo "‚ùå ERROR: No JS files referenced in HTML!"
            exit 1
          fi
          
          echo "‚úÖ Pre-deployment validation passed"
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Post-deployment verification
  post-deploy-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Verify deployment
        run: |
          echo "üîç Verifying live deployment..."
          
          # Check if site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://above-security.github.io/slides/)
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "‚ùå Site not accessible (HTTP $HTTP_STATUS)"
            exit 1
          fi
          
          # Check for critical content
          CONTENT=$(curl -s https://above-security.github.io/slides/)
          
          if ! echo "$CONTENT" | grep -q "Above.*Runtime Identity"; then
            echo "‚ùå Missing page title"
            exit 1
          fi
          
          if echo "$CONTENT" | grep -q "/src/main.jsx"; then
            echo "‚ùå ERROR: Live site still references source files!"
            exit 1
          fi
          
          echo "‚úÖ Live deployment verification passed"
          echo "üöÄ Presentation successfully deployed to: https://above-security.github.io/slides/"

